% This code simulates the design of a distributed embedded system for controlling the lights and the
% switches of a small railway station

sort 	  SignalId         = struct sig_t1 | sig_t2 | sig_w | sig_e;
        Color        		= struct red | green;
        TrackId        	= struct track_1 | track_2 | track_w | track_e;
        ControllerId   	= struct ctrl_w | ctrl_e;
        SensorId      	= struct sens_w | sens_e;

map  	controller_to_signal: ControllerId -> SignalId;
eqn  	controller_to_signal(ctrl_w) = sig_w;
     	controller_to_signal(ctrl_e)  = sig_e;

map  	controller_to_track: ControllerId -> TrackId;
eqn  	controller_to_track(ctrl_w) = track_w;
     	controller_to_track(ctrl_e)  = track_e;

map 	controller_to_nextTrain: ControllerId -> TrackId;
eqn 	controller_to_nextTrain(ctrl_w) = track_2;
	 	controller_to_nextTrain(ctrl_e) = track_1;

map 	controller_to_incomingTrain: ControllerId -> TrackId;
eqn 	controller_to_incomingTrain(ctrl_w) = track_1;
	 	controller_to_incomingTrain(ctrl_e) = track_2;


act setColor: SignalId # Color;
      sensorTriggered: SensorId;
      setSwitchPosition: TrackId # TrackId;
      s_trackOccupied, r_trackOccupied, trackOccupied: TrackId # Bool;
      s_trainIncomingSignal, r_trainIncomingSignal, trainIncomingSignal :TrackId;
      s_trainArrived, r_trainArrived, trainArrived : TrackId;
      
% This process ControllerStation, models the behaviour of the Controller station.
% Explanation of the different states of the process
% waiting_t1/waiting_t2 : Tells if a train waiting at Track1/2
% TrainIncomingEast/TrainIncomingWest: Tells if a train wants to enter the Track1/2 from East or West  
% listening_t1/listening_t2: Tells if it is waiting for a response from the Controller East/West to depart its waiting train

proc ControllerStation(waiting_t1: Bool, waiting_t2: Bool, TrainIncomingWest: Bool, TrainIncomingEast: Bool, listening_t1: Bool, listening_t2: Bool) = 

% The controller station recieves a signal from the E/W Controller that there is a train coming on its track,
% Next the controllerstation informs Environment controller that a train has lest E/W station and updates its waiting status.

  r_trackOccupied(track_1, true).ControllerStation(waiting_t1 = true)
+ r_trackOccupied(track_2, true).ControllerStation(waiting_t2 = true)

+ (waiting_t1 == true)->s_trackOccupied(track_w,false).s_trainArrived(track_1).setColor(sig_t1, red).ControllerStation(waiting_t1 = false, listening_t1 = true)
+ (listening_t1 == true)->r_trackOccupied(track_w,false)
.setColor(sig_t1, green).s_trainIncomingSignal(track_1).ControllerStation(listening_t1 = false)

+ (waiting_t2 == true)->s_trackOccupied(track_e,false).s_trainArrived(track_2).setColor(sig_t2, red).ControllerStation(waiting_t2 = false, listening_t2 = true)
+ (listening_t2 == true)->r_trackOccupied(track_e,false)
.setColor(sig_t2, green).s_trainIncomingSignal(track_2).ControllerStation(listening_t2 = false)


+ r_trackOccupied(track_1, false).ControllerStation(TrainIncomingEast = true)
+ r_trackOccupied(track_2, false).ControllerStation(TrainIncomingWest = true)

+ ((!listening_t1 && !waiting_t1) && TrainIncomingEast==true)-> s_trackOccupied(track_1,false).ControllerStation(TrainIncomingEast = false)
+ ((!listening_t2 && !waiting_t2) && TrainIncomingWest==true)-> s_trackOccupied(track_2,false).ControllerStation(TrainIncomingWest = false);


% This process Controller, models the behaviour of the Controller East and West.
% Explanation of the different states of the process
% ctrl: Tells which controller is it.
% TrainIncoming: Tells if a train wants to enter the Track from Track 1/2
% listening: Tells if it is waiting for a response from the Controller station to depart its waiting train.

proc Controller(ctrl: ControllerId, waiting: Bool, TrainIncoming: Bool, listening: Bool) = 

(!waiting && !listening)-> r_trainIncomingSignal(controller_to_track(ctrl)).Controller(waiting = true)

+ (waiting == true) -> s_trackOccupied(controller_to_nextTrain(ctrl),false).setColor(controller_to_signal(ctrl),red).Controller(waiting = false, listening = true)

+ (listening == true) ->r_trackOccupied(controller_to_nextTrain(ctrl), false).setSwitchPosition(controller_to_track(ctrl),controller_to_nextTrain(ctrl))
.setColor(controller_to_signal(ctrl),green).s_trackOccupied(controller_to_nextTrain(ctrl),true).Controller(listening = false)

+ r_trackOccupied(controller_to_track(ctrl), false).Controller(TrainIncoming = true)

+ ((!listening && !waiting) && TrainIncoming == true) -> setSwitchPosition(controller_to_track(ctrl),controller_to_incomingTrain(ctrl)).s_trackOccupied(controller_to_track(ctrl),false).Controller(TrainIncoming = false);


% This process EnvironmentController, models a controller that is controlling the number of trains entering into this railway station.
% TrainCounter: Tells the number of trains currently in the station.
% WaitingWest/WaitingEast: Tells if West/East sensor is triggered 
% ListenWest/ListenEast: Tells if EnvironmentController is waiting for a response from Controller Station about the status of train arrival

proc EnvironmentController(TrainCounter: Int, WaitingWest: Bool, WaitingEast: Bool, ListenWest: Bool, ListenEast: Bool) =

(TrainCounter < 3 && WaitingWest == false && ListenWest== false)->sensorTriggered(sens_w).EnvironmentController(WaitingWest = true,TrainCounter = succ(TrainCounter))
+(WaitingWest == true)->s_trainIncomingSignal(track_w).EnvironmentController(WaitingWest = false, ListenWest =true)
+(ListenWest == true)->r_trainArrived(track_2).EnvironmentController(ListenWest = false)


+(TrainCounter < 3 && WaitingEast == false && ListenEast== false)->sensorTriggered(sens_e).EnvironmentController(WaitingEast = true,TrainCounter = succ(TrainCounter))
+(WaitingEast == true)->s_trainIncomingSignal(track_e).EnvironmentController(WaitingEast = false, ListenEast =true)
+(ListenEast == true)->r_trainArrived(track_1).EnvironmentController(ListenEast = false)


+r_trainIncomingSignal(track_1).EnvironmentController(TrainCounter = pred(TrainCounter))
+r_trainIncomingSignal(track_2).EnvironmentController(TrainCounter = pred(TrainCounter));

init 
allow({setColor, sensorTriggered, setSwitchPosition, trackOccupied,trainIncomingSignal,trainArrived},
comm({s_trackOccupied | r_trackOccupied -> trackOccupied, s_trainIncomingSignal | r_trainIncomingSignal -> trainIncomingSignal, s_trainArrived | r_trainArrived -> trainArrived},
Controller(ctrl_w, false,false,false) || ControllerStation(false, false, false,false,false, false) || EnvironmentController(0,false,false,false,false)
));