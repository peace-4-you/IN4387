sort SignalId        = struct sig_t1 | sig_t2 | sig_w | sig_e;
        Color            = struct red | green;
        TrackId        = struct track_1 | track_2 | track_w | track_e;
        ControllerId = struct ctrl_w | ctrl_e;
        SensorId      = struct sens_w | sens_e;
        SwitchId      = struct switch_e | switch_w;
        SwitchPos   = struct pos_t1 | pos_t2;
        TrackStatus = struct free | occupied;

map sensor_to_controller: SensorId -> ControllerId;
eqn  sensor_to_controller(sens_w) = ctrl_w;
        sensor_to_controller(sens_e)  = ctrl_e;

map sensor_to_switchPos: SensorId -> SwitchPos;
eqn  sensor_to_switchPos(sens_w) = pos_t2;
        sensor_to_switchPos(sens_e)  = pos_t1;

map controller_to_signal: ControllerId -> SignalId;
eqn  controller_to_signal(ctrl_w) = sig_w;
        controller_to_signal(ctrl_e)  = sig_e;

map controller_to_switch: ControllerId -> SwitchId;
eqn  controller_to_switch(ctrl_w) = switch_w;
        controller_to_switch(ctrl_e)  = switch_e;

map controller_to_track: ControllerId -> TrackId;
eqn  controller_to_track(ctrl_w) = track_w;
        controller_to_track(ctrl_e)  = track_e;

map controller_to_sensor: ControllerId -> SensorId;
eqn  controller_to_sensor(ctrl_w) = sens_w;
        controller_to_sensor(ctrl_e)  = sens_e;

map signal_to_track: SignalId -> TrackId;
eqn  signal_to_track(sig_w) = track_2;
        signal_to_track(sig_e)  = track_1;
        signal_to_track(sig_t1) = track_w;
        signal_to_track(sig_t2) = track_e;

map controller_to_nextTrain: ControllerId -> TrackId;
eqn controller_to_nextTrain(ctrl_w) = track_2;
	controller_to_nextTrain(ctrl_e) = track_1;



act setColor: SignalId # Color;
      sensorTriggered: SensorId;
      setSwitchPosition: SwitchId # SwitchPos;
      s_trackOccupied, r_trackOccupied, trackOccupied: TrackId # Bool;
      s_trainIncoming :TrackId;



proc ControllerStation(waiting_t1: Bool, waiting_t2: Bool, TrainIncomingWest: Bool, TrainIncomingEast: Bool, listening_t1: Bool, listening_t2: Bool) = 

  r_trackOccupied(track_1, true).setColor(sig_t1, red).ControllerStation(waiting_t1 = true)
+ r_trackOccupied(track_2, true).setColor(sig_t2, red).ControllerStation(waiting_t2 = true)

+ (waiting_t1 == true)->s_trackOccupied(controller_to_track(ctrl_w),false).ControllerStation(waiting_t1 = false, listening_t1 = true)
+ (listening_t1 == true)->r_trackOccupied(controller_to_track(ctrl_w),false)
.setColor(sig_t1, green).ControllerStation(listening_t1 = false)

+ (waiting_t2 == true)->s_trackOccupied(controller_to_track(ctrl_e),false).ControllerStation(waiting_t2 = false, listening_t2 = true)
+ (listening_t2 == true)->r_trackOccupied(controller_to_track(ctrl_e),false)
.setColor(sig_t2, green).ControllerStation(listening_t2 = false)


+ r_trackOccupied(track_1, false).ControllerStation(TrainIncomingEast = true)
+ r_trackOccupied(track_2, false).ControllerStation(TrainIncomingWest = true)

+ (!waiting_t1 && TrainIncomingEast==true)-> s_trackOccupied(track_1,false).ControllerStation(TrainIncomingEast = false)
+ (!waiting_t2 && TrainIncomingWest==true)-> s_trackOccupied(track_2,false).ControllerStation(TrainIncomingWest = false);



proc Controller(ctrl: ControllerId, waiting: Bool, TrainIncoming: Bool, listening: Bool) = 

(!waiting && !listening)-> sum s:SensorId.(sensor_to_controller(s) == ctrl)-> sensorTriggered(s)
.setColor(controller_to_signal(ctrl),red).Controller(waiting = true)

+ (waiting == true) -> s_trackOccupied(controller_to_nextTrain(ctrl),false).Controller(waiting = false, listening = true)

+ (listening == true) ->r_trackOccupied(controller_to_nextTrain(ctrl), false)
.setColor(controller_to_signal(ctrl),green).s_trackOccupied(controller_to_nextTrain(ctrl),true).Controller(listening = false)

+ r_trackOccupied(controller_to_track(ctrl), false).Controller(TrainIncoming = true)

+ (!waiting && TrainIncoming == true) -> s_trackOccupied(controller_to_track(ctrl),false).Controller(TrainIncoming = false);





init 
allow({setColor, sensorTriggered, setSwitchPosition, trackOccupied},
comm({s_trackOccupied | r_trackOccupied -> trackOccupied},
Controller(ctrl_w, false,false,false) || Controller(ctrl_e, false,false,false) || ControllerStation(false, false, false,false,false, false)
));